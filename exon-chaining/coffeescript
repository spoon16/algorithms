#! /usr/bin/env coffee
fs = require 'fs'

fn = process.argv[2]

String::strip = () -> 
    @replace /^\s+|\s+$/g, ""

#String::split = () ->
#    @split /\s+/

Array::union = (other) ->
    Array::push.apply @, other

print = (values...) ->
    process.stdout.write values.toString() + '\n'

class Node
    constructor: (@location, @score, @startNode) ->
        @isEnd = true if @startNode

build_graph_from_input = (lines) ->
    graph = []
    for line in lines
        if line.strip().length > 0
            [start,stop,score] = (parseInt num.strip() for num in line.split /\s+/)
            
            startNode = new Node start, score
            stopNode = new Node stop, score, startNode

            graph.union [startNode, stopNode]

    graph.sort (a, b) ->
        if a.location == b.location
            (a.startNode?.location or -1) - (b.startNode?.location or -1)
        else
            a.location - b.location

    for i in [0..graph.length - 1]
        graph[i]['index'] = i

    graph

get_score = (graph) ->
    scores = [0]

    for node in graph
        lastScore = scores[scores.length - 1]
        if not node.isEnd
            scores[scores.length] = lastScore
        else
            scoreIndex = node.startNode.index
            score = node.score
            newScore = Math.max scores[scoreIndex] + score, lastScore
            scores[scores.length] = newScore

    scores[scores.length - 1]

process_input = (lines) ->
    graph = build_graph_from_input lines
    print get_score graph

if fn
    fs.readFile fn, (err, input) ->
        throw err if err
        lines = input.toString().split '\n'
        process_input lines
else
    stdin = process.openStdin()
    data = ''
    stdin.on 'data', (chunk) ->
         data += chunk.toString() if chunk
    stdin.on 'end', ->
        lines = data.split '\n'
        process_input lines
